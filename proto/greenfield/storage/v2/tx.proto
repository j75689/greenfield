syntax = "proto3";

package greenfield.storage.v2;

import "cosmos/msg/v1/msg.proto";
// this line is used by starport scaffolding # proto/tx/import
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "greenfield/common/approval.proto";
import "greenfield/common/wrapper.proto";
import "greenfield/permission/common.proto";
import "greenfield/storage/common.proto";
import "greenfield/storage/params.proto";
import "greenfield/storage/types.proto";
import "greenfield/storage/tx.proto";

option go_package = "github.com/bnb-chain/greenfield/x/storage/types/v2";

// Msg defines the Msg service.
service Msg {
  // basic operation of bucket
  rpc CreateBucket(MsgCreateBucket) returns (MsgCreateBucketResponse);
  rpc DeleteBucket(MsgDeleteBucket) returns (MsgDeleteBucketResponse);
  rpc UpdateBucketInfo(MsgUpdateBucketInfo) returns (MsgUpdateBucketInfoResponse);
  rpc MirrorBucket(MsgMirrorBucket) returns (MsgMirrorBucketResponse);
  rpc DiscontinueBucket(MsgDiscontinueBucket) returns (MsgDiscontinueBucketResponse);

  // basic operation of object
  rpc CreateObject(MsgCreateObject) returns (MsgCreateObjectResponse);
  rpc SealObject(MsgSealObject) returns (MsgSealObjectResponse);
  rpc RejectSealObject(MsgRejectSealObject) returns (MsgRejectSealObjectResponse);
  rpc CopyObject(MsgCopyObject) returns (MsgCopyObjectResponse);
  rpc DeleteObject(MsgDeleteObject) returns (MsgDeleteObjectResponse);
  rpc CancelCreateObject(MsgCancelCreateObject) returns (MsgCancelCreateObjectResponse);
  rpc MirrorObject(MsgMirrorObject) returns (MsgMirrorObjectResponse);
  rpc DiscontinueObject(MsgDiscontinueObject) returns (MsgDiscontinueObjectResponse);
  rpc UpdateObjectInfo(MsgUpdateObjectInfo) returns (MsgUpdateObjectInfoResponse);

  // basic operation of group
  rpc CreateGroup(MsgCreateGroupV2) returns (MsgCreateGroupResponse);
  rpc DeleteGroup(MsgDeleteGroup) returns (MsgDeleteGroupResponse);
  rpc UpdateGroupMember(MsgUpdateGroupMemberV2) returns (MsgUpdateGroupMemberResponse);
  rpc UpdateGroupExtra(MsgUpdateGroupExtra) returns (MsgUpdateGroupExtraResponse);
  rpc LeaveGroup(MsgLeaveGroup) returns (MsgLeaveGroupResponse);
  rpc MirrorGroup(MsgMirrorGroup) returns (MsgMirrorGroupResponse);

  // basic operation of policy
  rpc PutPolicy(MsgPutPolicy) returns (MsgPutPolicyResponse);
  rpc DeletePolicy(MsgDeletePolicy) returns (MsgDeletePolicyResponse);

  // UpdateParams defines a governance operation for updating the x/storage module parameters.
  // The authority is defined in the keeper.

  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // this line is used by starport scaffolding # proto/tx/rpc
  rpc MigrateBucket(MsgMigrateBucket) returns (MsgMigrateBucketResponse);
  rpc CompleteMigrateBucket(MsgCompleteMigrateBucket) returns (MsgCompleteMigrateBucketResponse);
  rpc CancelMigrateBucket(MsgCancelMigrateBucket) returns (MsgCancelMigrateBucketResponse);
}

message MsgCreateGroupV2 {
  option (cosmos.msg.v1.signer) = "creator";

  // owner defines the account address of group owner who create the group
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // group_name defines the name of the group. it's not globally unique.
  string group_name = 2;

  // member_request defines a list of member which to be add or remove
  repeated string members = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // extra defines extra info for the group
  string extra = 4;

  // members_with_expiration defines a list of member with expiration time
  repeated MsgGroupMember members_with_expiration = 5;
}


message MsgUpdateGroupMemberV2 {
  option (cosmos.msg.v1.signer) = "operator";

  // operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
  string operator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // group_owner defines the account address of the group owner
  string group_owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // group_name defines the name of the group which to be updated
  string group_name = 3;

  // members_to_add defines a list of members account address which will be add to the group
  repeated string members_to_add = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // members_to_delete defines a list of members account address which will be remove from the group
  repeated string members_to_delete = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // members_with_expiration defines a list of member with expiration time
  repeated MsgGroupMember members_with_expiration = 6;
}

message MsgGroupMember {
  // member defines the account address of the group member
  string member = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // expiration_time defines the expiration time of the group member
  google.protobuf.Timestamp expiration_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}
