syntax = "proto3";

package greenfield.storage.v2;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "greenfield/permission/common.proto";
import "greenfield/permission/types.proto";
import "greenfield/storage/params.proto";
import "greenfield/storage/types.proto";
import "greenfield/storage/query.proto";
import "greenfield/virtualgroup/types.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/greenfield/x/storage/types/v2";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/params";
  }

  // Parameters queries the parameters of the module.
  rpc QueryParamsByTimestamp(QueryParamsByTimestampRequest) returns (QueryParamsByTimestampResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/params/{timestamp}";
  }

  // Queries a bucket with specify name.
  rpc HeadBucket(QueryHeadBucketRequest) returns (QueryHeadBucketResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_bucket/{bucket_name}";
  }

  // Queries a bucket by id
  rpc HeadBucketById(QueryHeadBucketByIdRequest) returns (QueryHeadBucketResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_bucket_by_id/{bucket_id}";
  }

  // Queries a bucket with EIP712 standard metadata info
  rpc HeadBucketNFT(QueryNFTRequest) returns (QueryBucketNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_bucket_nft/{token_id}";
  }

  // Queries a object with specify name.
  rpc HeadObject(QueryHeadObjectRequest) returns (QueryHeadObjectResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_object/{bucket_name}/{object_name}";
  }

  // Queries an object by id
  rpc HeadObjectById(QueryHeadObjectByIdRequest) returns (QueryHeadObjectResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_object_by_id/{object_id}";
  }

  // Queries a object with EIP712 standard metadata info
  rpc HeadObjectNFT(QueryNFTRequest) returns (QueryObjectNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_object_nft/{token_id}";
  }

  // Queries a list of bucket items.
  rpc ListBuckets(QueryListBucketsRequest) returns (QueryListBucketsResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/list_buckets";
  }

  // Queries a list of object items under the bucket.
  rpc ListObjects(QueryListObjectsRequest) returns (QueryListObjectsResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/list_objects/{bucket_name}";
  }

  // Queries a list of object items under the bucket.
  rpc ListObjectsByBucketId(QueryListObjectsByBucketIdRequest) returns (QueryListObjectsResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/list_objects_by_bucket_id/{bucket_id}";
  }

  // Queries a group with EIP712 standard metadata info
  rpc HeadGroupNFT(QueryNFTRequest) returns (QueryGroupNFTResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_group_nft/{token_id}";
  }

  // Queries a policy which grants permission to account
  rpc QueryPolicyForAccount(QueryPolicyForAccountRequest) returns (QueryPolicyForAccountResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/policy_for_account/{resource}/{principal_address}";
  }

  // Queries a list of VerifyPermission items.
  rpc VerifyPermission(QueryVerifyPermissionRequest) returns (QueryVerifyPermissionResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/verify_permission/{operator}/{bucket_name}/{action_type}";
  }

  // Queries a group with specify owner and name .
  rpc HeadGroup(QueryHeadGroupRequest) returns (QueryHeadGroupResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_group/{group_owner}/{group_name}";
  }

  // Queries a list of ListGroup items.
  rpc ListGroup(QueryListGroupRequest) returns (QueryListGroupResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/list_group/{group_owner}";
  }

  // Queries a list of HeadGroupMember items.
  rpc HeadGroupMember(QueryHeadGroupMemberRequest) returns (QueryHeadGroupMemberResponseV2) {
    option (google.api.http).get = "/greenfield/storage/v2/head_group_member";
  }

  // Queries a policy that grants permission to a group
  rpc QueryPolicyForGroup(QueryPolicyForGroupRequest) returns (QueryPolicyForGroupResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/policy_for_group/{resource}/{principal_group_id}";
  }

  // Queries a policy by policy id
  rpc QueryPolicyById(QueryPolicyByIdRequest) returns (QueryPolicyByIdResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/policy_by_id/{policy_id}";
  }

  // Queries lock fee for storing an object
  rpc QueryLockFee(QueryLockFeeRequest) returns (QueryLockFeeResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/lock_fee";
  }

  // Queries a bucket extra info (with gvg bindings and price time) with specify name.
  rpc HeadBucketExtra(QueryHeadBucketExtraRequest) returns (QueryHeadBucketExtraResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/head_bucket_extra/{bucket_name}";
  }

  // Queries whether read and storage prices changed for the bucket.
  rpc QueryIsPriceChanged(QueryIsPriceChangedRequest) returns (QueryIsPriceChangedResponse) {
    option (google.api.http).get = "/greenfield/storage/v2/is_price_changed/{bucket_name}";
  }

  // this line is used by starport scaffolding # 2
}

message QueryHeadGroupMemberResponseV2 {
  // id is an unique u256 sequence for each group member. It also be used as NFT tokenID
  string id = 1 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // group_id is the unique id of the group
  string group_id = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "Uint",
    (gogoproto.nullable) = false
  ];
  // member is the account address of the member
  string member = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  google.protobuf.Timestamp expiration_time = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}
