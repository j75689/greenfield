// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/storage/v2/events.proto

package v2

import (
	fmt "fmt"
	types "github.com/bnb-chain/greenfield/x/storage/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateGroup is emitted on MsgCreateGroup
type EventCreateGroup struct {
	// owner define the account address of group owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// group_name define the name of the group
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// id define an u256 id for group
	GroupId Uint `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3,customtype=Uint" json:"group_id"`
	// source_type define the source of the group. CrossChain or Greenfield origin
	SourceType types.SourceType `protobuf:"varint,4,opt,name=source_type,json=sourceType,proto3,enum=greenfield.storage.SourceType" json:"source_type,omitempty"`
	// members define the all the address of the members.
	Members []string `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	// extra defines extra info for the group
	Extra string `protobuf:"bytes,6,opt,name=extra,proto3" json:"extra,omitempty"`
	// members_detail defines the all the members detail of the group.
	MembersDetail []*MsgGroupMember `protobuf:"bytes,7,rep,name=members_detail,json=membersDetail,proto3" json:"members_detail,omitempty"`
}

func (m *EventCreateGroup) Reset()         { *m = EventCreateGroup{} }
func (m *EventCreateGroup) String() string { return proto.CompactTextString(m) }
func (*EventCreateGroup) ProtoMessage()    {}
func (*EventCreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_f90114a3c0a4b0c1, []int{0}
}
func (m *EventCreateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateGroup.Merge(m, src)
}
func (m *EventCreateGroup) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateGroup proto.InternalMessageInfo

func (m *EventCreateGroup) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventCreateGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *EventCreateGroup) GetSourceType() types.SourceType {
	if m != nil {
		return m.SourceType
	}
	return types.SOURCE_TYPE_ORIGIN
}

func (m *EventCreateGroup) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *EventCreateGroup) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *EventCreateGroup) GetMembersDetail() []*MsgGroupMember {
	if m != nil {
		return m.MembersDetail
	}
	return nil
}

// EventUpdateGroupMember is emitted on MsgUpdateGroupMember
type EventUpdateGroupMember struct {
	// operator define the account address of operator who update the group member
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// owner define the account address of group owner
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// group_name define the name of the group
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// id define an u256 id for group
	GroupId Uint `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3,customtype=Uint" json:"group_id"`
	// members_to_add defines all the members to be added to the group
	MembersToAdd []string `protobuf:"bytes,5,rep,name=members_to_add,json=membersToAdd,proto3" json:"members_to_add,omitempty"`
	// members_to_add defines all the members to be deleted from the group
	MembersToDelete []string `protobuf:"bytes,6,rep,name=members_to_delete,json=membersToDelete,proto3" json:"members_to_delete,omitempty"`
	// members_detail defines the all the members detail of the group.
	MembersDetail []*MsgGroupMember `protobuf:"bytes,7,rep,name=members_detail,json=membersDetail,proto3" json:"members_detail,omitempty"`
}

func (m *EventUpdateGroupMember) Reset()         { *m = EventUpdateGroupMember{} }
func (m *EventUpdateGroupMember) String() string { return proto.CompactTextString(m) }
func (*EventUpdateGroupMember) ProtoMessage()    {}
func (*EventUpdateGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_f90114a3c0a4b0c1, []int{1}
}
func (m *EventUpdateGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateGroupMember.Merge(m, src)
}
func (m *EventUpdateGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateGroupMember proto.InternalMessageInfo

func (m *EventUpdateGroupMember) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventUpdateGroupMember) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EventUpdateGroupMember) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *EventUpdateGroupMember) GetMembersToAdd() []string {
	if m != nil {
		return m.MembersToAdd
	}
	return nil
}

func (m *EventUpdateGroupMember) GetMembersToDelete() []string {
	if m != nil {
		return m.MembersToDelete
	}
	return nil
}

func (m *EventUpdateGroupMember) GetMembersDetail() []*MsgGroupMember {
	if m != nil {
		return m.MembersDetail
	}
	return nil
}

func init() {
	proto.RegisterType((*EventCreateGroup)(nil), "greenfield.storage.v2.EventCreateGroup")
	proto.RegisterType((*EventUpdateGroupMember)(nil), "greenfield.storage.v2.EventUpdateGroupMember")
}

func init() {
	proto.RegisterFile("greenfield/storage/v2/events.proto", fileDescriptor_f90114a3c0a4b0c1)
}

var fileDescriptor_f90114a3c0a4b0c1 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x3a, 0x7f, 0xda, 0x0d, 0x14, 0x58, 0x05, 0x64, 0x5a, 0xe1, 0x44, 0x91, 0x90,
	0x72, 0x89, 0x2d, 0x19, 0xc4, 0x11, 0xd4, 0x12, 0x84, 0x90, 0x5a, 0x0e, 0x6e, 0x7b, 0xe1, 0x62,
	0xd9, 0xde, 0xc1, 0xb5, 0x14, 0xef, 0x5a, 0xbb, 0x1b, 0x93, 0xbe, 0x05, 0xaf, 0xc1, 0xbd, 0x0f,
	0xd1, 0x63, 0xd5, 0x13, 0xe2, 0x50, 0xa1, 0xe4, 0x0d, 0x78, 0x02, 0xe4, 0xb5, 0x93, 0x14, 0xc9,
	0x4a, 0x04, 0xe2, 0xb6, 0x33, 0xf3, 0xfb, 0xc6, 0x9a, 0x6f, 0x3c, 0xa8, 0x1f, 0x71, 0x00, 0xfa,
	0x39, 0x86, 0x31, 0xb1, 0x85, 0x64, 0xdc, 0x8f, 0xc0, 0xce, 0x1c, 0x1b, 0x32, 0xa0, 0x52, 0x58,
	0x29, 0x67, 0x92, 0xe1, 0xc7, 0x2b, 0xc6, 0x2a, 0x19, 0x2b, 0x73, 0xf6, 0x9e, 0x86, 0x4c, 0x24,
	0x4c, 0x78, 0x0a, 0xb2, 0x8b, 0xa0, 0x50, 0xec, 0x75, 0x22, 0x16, 0xb1, 0x22, 0x9f, 0xbf, 0xca,
	0x6c, 0xb7, 0xe2, 0x5b, 0x21, 0x4b, 0x12, 0x46, 0x4b, 0xc0, 0xac, 0x00, 0xe4, 0x45, 0x0a, 0x8b,
	0xb6, 0xfb, 0x55, 0xf5, 0xe9, 0x1a, 0x71, 0xe6, 0x2c, 0xeb, 0xfd, 0x5f, 0x5b, 0xe8, 0xe1, 0xbb,
	0x7c, 0xac, 0xb7, 0x1c, 0x7c, 0x09, 0xef, 0x39, 0x9b, 0xa4, 0xd8, 0x42, 0x0d, 0xf6, 0x85, 0x02,
	0x37, 0xb4, 0x9e, 0x36, 0xd8, 0x39, 0x34, 0x6e, 0x2e, 0x87, 0x9d, 0x72, 0x92, 0x03, 0x42, 0x38,
	0x08, 0x71, 0x22, 0x79, 0x4c, 0x23, 0xb7, 0xc0, 0xf0, 0x33, 0x84, 0xa2, 0x5c, 0xe8, 0x51, 0x3f,
	0x01, 0x63, 0x2b, 0x17, 0xb9, 0x3b, 0x2a, 0xf3, 0xd1, 0x4f, 0x00, 0xbf, 0x42, 0xdb, 0x45, 0x39,
	0x26, 0x86, 0xae, 0x3a, 0xee, 0x5f, 0xdd, 0x76, 0x6b, 0x3f, 0x6e, 0xbb, 0xf5, 0xb3, 0x98, 0xca,
	0x9b, 0xcb, 0x61, 0xbb, 0xec, 0x9e, 0x87, 0x6e, 0x4b, 0xc1, 0x1f, 0x08, 0x7e, 0x83, 0xda, 0x82,
	0x4d, 0x78, 0x08, 0x5e, 0x3e, 0xae, 0x51, 0xef, 0x69, 0x83, 0x5d, 0xc7, 0xb4, 0x2a, 0x7c, 0x3f,
	0x51, 0xd8, 0xe9, 0x45, 0x0a, 0x2e, 0x12, 0xcb, 0x37, 0x76, 0x50, 0x2b, 0x81, 0x24, 0x00, 0x2e,
	0x8c, 0x46, 0x4f, 0x5f, 0x3b, 0xc9, 0x02, 0xc4, 0x1d, 0xd4, 0x80, 0xa9, 0xe4, 0xbe, 0xd1, 0x54,
	0x63, 0x14, 0x01, 0x3e, 0x42, 0xbb, 0x25, 0xe0, 0x11, 0x90, 0x7e, 0x3c, 0x36, 0x5a, 0x3d, 0x7d,
	0xd0, 0x76, 0x9e, 0x5b, 0x95, 0x7f, 0x81, 0x75, 0x2c, 0x22, 0x65, 0xe5, 0xb1, 0x12, 0xb9, 0xf7,
	0x4b, 0xf1, 0x48, 0x69, 0xfb, 0xdf, 0x74, 0xf4, 0x44, 0x99, 0x7e, 0x96, 0x92, 0x85, 0xe9, 0x05,
	0x89, 0x5f, 0xa2, 0x6d, 0x96, 0x02, 0xf7, 0x25, 0xdb, 0xec, 0xfe, 0x92, 0x5c, 0x2d, 0x6c, 0xeb,
	0x5f, 0x16, 0xa6, 0xaf, 0x5b, 0x58, 0xfd, 0x2f, 0x16, 0xf6, 0x7a, 0xe5, 0x92, 0x64, 0x9e, 0x4f,
	0xc8, 0x46, 0xdb, 0xef, 0x95, 0xfc, 0x29, 0x3b, 0x20, 0x04, 0x8f, 0xd0, 0xa3, 0x3b, 0x7a, 0x02,
	0x63, 0x90, 0x60, 0x34, 0x37, 0xb4, 0x78, 0xb0, 0x6c, 0x31, 0x52, 0x82, 0xff, 0xbb, 0xab, 0xc3,
	0xa3, 0xab, 0x99, 0xa9, 0x5d, 0xcf, 0x4c, 0xed, 0xe7, 0xcc, 0xd4, 0xbe, 0xce, 0xcd, 0xda, 0xf5,
	0xdc, 0xac, 0x7d, 0x9f, 0x9b, 0xb5, 0x4f, 0x4e, 0x14, 0xcb, 0xf3, 0x49, 0x60, 0x85, 0x2c, 0xb1,
	0x03, 0x1a, 0x0c, 0xc3, 0x73, 0x3f, 0xa6, 0xf6, 0x9d, 0x7b, 0x9b, 0xfe, 0x79, 0xae, 0x76, 0xe6,
	0x04, 0x4d, 0x75, 0x75, 0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x75, 0x8f, 0x54, 0x61,
	0x04, 0x00, 0x00,
}

func (m *EventCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MembersDetail) > 0 {
		for iNdEx := len(m.MembersDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MembersDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SourceType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceType))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.GroupId.Size()
		i -= size
		if _, err := m.GroupId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MembersDetail) > 0 {
		for iNdEx := len(m.MembersDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MembersDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MembersToDelete) > 0 {
		for iNdEx := len(m.MembersToDelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersToDelete[iNdEx])
			copy(dAtA[i:], m.MembersToDelete[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.MembersToDelete[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MembersToAdd) > 0 {
		for iNdEx := len(m.MembersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersToAdd[iNdEx])
			copy(dAtA[i:], m.MembersToAdd[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.MembersToAdd[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.GroupId.Size()
		i -= size
		if _, err := m.GroupId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.GroupId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.SourceType != 0 {
		n += 1 + sovEvents(uint64(m.SourceType))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.MembersDetail) > 0 {
		for _, e := range m.MembersDetail {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventUpdateGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.GroupId.Size()
	n += 1 + l + sovEvents(uint64(l))
	if len(m.MembersToAdd) > 0 {
		for _, s := range m.MembersToAdd {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.MembersToDelete) > 0 {
		for _, s := range m.MembersToDelete {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.MembersDetail) > 0 {
		for _, e := range m.MembersDetail {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceType |= types.SourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersDetail = append(m.MembersDetail, &MsgGroupMember{})
			if err := m.MembersDetail[len(m.MembersDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToAdd = append(m.MembersToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToDelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToDelete = append(m.MembersToDelete, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersDetail = append(m.MembersDetail, &MsgGroupMember{})
			if err := m.MembersDetail[len(m.MembersDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
