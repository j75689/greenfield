// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/storage/v2/query.proto

package v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/bnb-chain/greenfield/x/permission/types"
	types "github.com/bnb-chain/greenfield/x/storage/types"
	_ "github.com/bnb-chain/greenfield/x/virtualgroup/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryHeadGroupMemberResponseV2 struct {
	// id is an unique u256 sequence for each group member. It also be used as NFT tokenID
	Id Uint `protobuf:"bytes,1,opt,name=id,proto3,customtype=Uint" json:"id"`
	// group_id is the unique id of the group
	GroupId Uint `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3,customtype=Uint" json:"group_id"`
	// member is the account address of the member
	Member         string    `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	ExpirationTime time.Time `protobuf:"bytes,4,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
}

func (m *QueryHeadGroupMemberResponseV2) Reset()         { *m = QueryHeadGroupMemberResponseV2{} }
func (m *QueryHeadGroupMemberResponseV2) String() string { return proto.CompactTextString(m) }
func (*QueryHeadGroupMemberResponseV2) ProtoMessage()    {}
func (*QueryHeadGroupMemberResponseV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_591a93bf0e1a9677, []int{0}
}
func (m *QueryHeadGroupMemberResponseV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHeadGroupMemberResponseV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHeadGroupMemberResponseV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHeadGroupMemberResponseV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHeadGroupMemberResponseV2.Merge(m, src)
}
func (m *QueryHeadGroupMemberResponseV2) XXX_Size() int {
	return m.Size()
}
func (m *QueryHeadGroupMemberResponseV2) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHeadGroupMemberResponseV2.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHeadGroupMemberResponseV2 proto.InternalMessageInfo

func (m *QueryHeadGroupMemberResponseV2) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *QueryHeadGroupMemberResponseV2) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*QueryHeadGroupMemberResponseV2)(nil), "greenfield.storage.v2.QueryHeadGroupMemberResponseV2")
}

func init() { proto.RegisterFile("greenfield/storage/v2/query.proto", fileDescriptor_591a93bf0e1a9677) }

var fileDescriptor_591a93bf0e1a9677 = []byte{
	// 1273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0xa1, 0x94, 0x66, 0x52, 0x1a, 0x34, 0x34, 0x28, 0x04, 0x6a, 0x37, 0x89, 0x4a,
	0xf3, 0x83, 0x78, 0x62, 0x97, 0xa6, 0x45, 0x2a, 0x11, 0x35, 0x90, 0x36, 0xa8, 0x6d, 0xd2, 0x10,
	0x8a, 0xc4, 0x65, 0x35, 0xde, 0x1d, 0x6f, 0x86, 0x78, 0x77, 0xb6, 0xb3, 0x6b, 0x13, 0xcb, 0xb2,
	0x84, 0x38, 0x70, 0xe0, 0x54, 0x09, 0x21, 0x21, 0xf5, 0xc0, 0x81, 0x0b, 0x12, 0xe2, 0x82, 0xc2,
	0x3f, 0xc0, 0x85, 0x9e, 0xaa, 0xa8, 0x5c, 0x10, 0x87, 0x82, 0x12, 0xfe, 0x10, 0xb4, 0x33, 0xb3,
	0xeb, 0xb5, 0xeb, 0xf5, 0x6e, 0x22, 0x4e, 0xc9, 0xec, 0x7e, 0xdf, 0x9b, 0xcf, 0xbc, 0xf7, 0x66,
	0xe6, 0xad, 0xc1, 0x94, 0xc5, 0x09, 0x71, 0xaa, 0x94, 0xd4, 0x4c, 0xe4, 0xf9, 0x8c, 0x63, 0x8b,
	0xa0, 0x46, 0x09, 0xdd, 0xaf, 0x13, 0xde, 0x2c, 0xb8, 0x9c, 0xf9, 0x0c, 0x8e, 0x77, 0x24, 0x05,
	0x25, 0x29, 0x34, 0x4a, 0x93, 0xf3, 0x06, 0xf3, 0x6c, 0xe6, 0xa1, 0x0a, 0xf6, 0x88, 0xd4, 0xa3,
	0x46, 0xb1, 0x42, 0x7c, 0x5c, 0x44, 0x2e, 0xb6, 0xa8, 0x83, 0x7d, 0xca, 0x1c, 0xe9, 0x62, 0xf2,
	0x55, 0xa9, 0xd5, 0xc5, 0x08, 0xc9, 0x81, 0x7a, 0x75, 0xd6, 0x62, 0x16, 0x93, 0xcf, 0x83, 0xff,
	0xd4, 0xd3, 0xbc, 0xc5, 0x98, 0x55, 0x23, 0x48, 0x8c, 0x2a, 0xf5, 0x2a, 0xf2, 0xa9, 0x4d, 0x3c,
	0x1f, 0xdb, 0xae, 0x12, 0xbc, 0xae, 0x04, 0xd8, 0xa5, 0x08, 0x3b, 0x0e, 0xf3, 0xc5, 0x74, 0xa1,
	0xd3, 0xe9, 0xd8, 0xaa, 0x5c, 0xc2, 0x6d, 0xea, 0x79, 0x94, 0x39, 0xc8, 0x60, 0xb6, 0x1d, 0x31,
	0x4d, 0xf5, 0xd7, 0xf8, 0x4d, 0x97, 0x78, 0x11, 0xc5, 0xb3, 0xc1, 0x71, 0x31, 0xc7, 0x76, 0x28,
	0xc8, 0xf5, 0x11, 0xc4, 0x1d, 0xf4, 0x7b, 0x1f, 0x0b, 0xed, 0xe4, 0x4c, 0xec, 0x7d, 0x83, 0x72,
	0xbf, 0x8e, 0x6b, 0x16, 0x67, 0x75, 0x37, 0xee, 0x64, 0xfa, 0xab, 0x61, 0x90, 0xbb, 0x1b, 0x18,
	0xdd, 0x24, 0xd8, 0xbc, 0x11, 0xbc, 0xbe, 0x4d, 0xec, 0x0a, 0xe1, 0x9b, 0xc4, 0x73, 0x99, 0xe3,
	0x91, 0x7b, 0x25, 0xb8, 0x00, 0x86, 0xa9, 0x39, 0xa1, 0x9d, 0xd7, 0x66, 0x47, 0xca, 0xaf, 0x3d,
	0x7a, 0x9a, 0x1f, 0xfa, 0xeb, 0x69, 0xfe, 0xc4, 0xc7, 0xd4, 0xf1, 0x9f, 0xec, 0x2d, 0x8e, 0xaa,
	0x70, 0x07, 0xc3, 0xcd, 0x61, 0x6a, 0xc2, 0x65, 0x70, 0x4a, 0x4c, 0xa2, 0x53, 0x73, 0x62, 0x38,
	0xdd, 0xe4, 0x05, 0x21, 0x5e, 0x33, 0xe1, 0x12, 0x38, 0x69, 0x8b, 0x89, 0x27, 0x9e, 0x13, 0x56,
	0x13, 0x4f, 0xf6, 0x16, 0xcf, 0x2a, 0xe5, 0x75, 0xd3, 0xe4, 0xc4, 0xf3, 0x3e, 0xf2, 0x39, 0x75,
	0xac, 0x4d, 0xa5, 0x83, 0xb7, 0xc1, 0x18, 0xd9, 0x75, 0x29, 0x17, 0xb9, 0xd1, 0x83, 0x14, 0x4e,
	0x9c, 0x38, 0xaf, 0xcd, 0x8e, 0x96, 0x26, 0x0b, 0x32, 0x7d, 0x85, 0x30, 0xbf, 0x85, 0xad, 0x30,
	0xbf, 0xe5, 0x53, 0x01, 0xcc, 0x83, 0xbf, 0xf3, 0xda, 0xe6, 0x99, 0x8e, 0x71, 0xf0, 0xba, 0xf4,
	0xf8, 0x1c, 0x78, 0x5e, 0x04, 0x02, 0x7e, 0xa1, 0x81, 0x93, 0x1b, 0x22, 0x11, 0xf0, 0x8d, 0x42,
	0x9f, 0xf2, 0x14, 0x2a, 0x29, 0xd8, 0x24, 0xf7, 0xeb, 0xc4, 0xf3, 0x27, 0x2f, 0xa6, 0xea, 0x64,
	0x34, 0xa7, 0x2f, 0x7c, 0xf9, 0xc7, 0xbf, 0xdf, 0x0c, 0xe7, 0xe1, 0x39, 0xd4, 0x7f, 0x6b, 0xc8,
	0x02, 0x80, 0xbf, 0x68, 0xe0, 0x95, 0x98, 0x79, 0xb9, 0x19, 0xad, 0x00, 0x16, 0x53, 0xa6, 0x8a,
	0x69, 0x43, 0xba, 0xd2, 0x51, 0x4c, 0x14, 0x68, 0x51, 0x80, 0x2e, 0xc0, 0xb9, 0x81, 0xa0, 0xa8,
	0x15, 0x6d, 0x9d, 0x36, 0xfc, 0x5e, 0x03, 0x20, 0xa8, 0xa2, 0x72, 0xdd, 0xd8, 0x21, 0x3e, 0x9c,
	0x4f, 0x9c, 0xb5, 0x23, 0x0a, 0x09, 0x17, 0x32, 0x69, 0x15, 0xda, 0x55, 0x81, 0x56, 0x82, 0x4b,
	0x09, 0x68, 0xdb, 0x04, 0x9b, 0x7a, 0x45, 0xd8, 0xa0, 0x96, 0xfc, 0xab, 0x3b, 0xd8, 0x26, 0x6d,
	0xf8, 0x93, 0x06, 0xce, 0x74, 0x1c, 0x96, 0x9b, 0x6b, 0x26, 0x2c, 0x64, 0x98, 0x39, 0x10, 0x1e,
	0x8b, 0xf4, 0x9a, 0x20, 0x5d, 0x86, 0x6f, 0xa5, 0x93, 0xea, 0x95, 0xa6, 0x4e, 0xcd, 0x88, 0x97,
	0x9a, 0x6d, 0xf8, 0x50, 0x03, 0x2f, 0x76, 0x9c, 0xde, 0x59, 0xdd, 0x82, 0x33, 0x89, 0x93, 0xdf,
	0x59, 0xdd, 0x0a, 0x09, 0x93, 0xe3, 0x1e, 0x39, 0x8a, 0x00, 0xdf, 0x16, 0x80, 0x97, 0x60, 0x31,
	0x03, 0xa0, 0x53, 0xf5, 0x51, 0xcb, 0x67, 0x3b, 0xc4, 0x11, 0x74, 0x3f, 0xab, 0x6c, 0xaf, 0x57,
	0x3e, 0x23, 0x46, 0x5a, 0xb6, 0xa5, 0x28, 0x5b, 0x0c, 0x43, 0xad, 0x42, 0x5c, 0x15, 0x88, 0xef,
	0xc2, 0x95, 0x41, 0x88, 0x4c, 0xd8, 0x74, 0x67, 0x1b, 0xb5, 0xe4, 0xd3, 0x9e, 0xdc, 0x4b, 0xf7,
	0x19, 0x72, 0xdf, 0x11, 0x1e, 0x8b, 0x3b, 0x53, 0xee, 0x15, 0xa1, 0xca, 0xbd, 0x1a, 0xc5, 0x73,
	0x2f, 0x9d, 0xfe, 0x0f, 0xb9, 0x8f, 0x1c, 0x1d, 0x2d, 0xf7, 0x61, 0x08, 0xbb, 0x73, 0xff, 0xad,
	0x06, 0x46, 0x6f, 0x51, 0xcf, 0x97, 0x05, 0xe5, 0xc1, 0xe4, 0xc0, 0xc4, 0x54, 0x21, 0xe3, 0x9b,
	0xd9, 0xc4, 0x8a, 0x72, 0x41, 0x50, 0x5e, 0x80, 0x33, 0x09, 0x94, 0x35, 0xea, 0xf9, 0xaa, 0x42,
	0x3d, 0xf8, 0x83, 0xe2, 0x92, 0x8b, 0x4d, 0xe3, 0x52, 0xaa, 0x6c, 0x5c, 0x91, 0x38, 0x63, 0xf4,
	0x04, 0x97, 0x8c, 0x9e, 0xd7, 0x73, 0x0a, 0xfd, 0xa6, 0x81, 0xf1, 0x98, 0xcb, 0xb2, 0xda, 0x97,
	0x6b, 0x26, 0xbc, 0x9c, 0x05, 0xa1, 0xa3, 0x3f, 0x1e, 0xf9, 0xfb, 0x82, 0x7c, 0x05, 0x5e, 0xcb,
	0x40, 0x1e, 0x54, 0x66, 0x74, 0x22, 0x75, 0x1d, 0x4e, 0xdf, 0x69, 0xe0, 0x74, 0xd4, 0x32, 0x64,
	0xae, 0xcf, 0xb9, 0x44, 0x51, 0xe8, 0xe7, 0x68, 0xa7, 0xbc, 0x6c, 0x35, 0x7a, 0xaa, 0xf3, 0xb1,
	0x06, 0xc6, 0xe5, 0xed, 0xc6, 0x6a, 0xd4, 0x68, 0xae, 0x32, 0x7e, 0xdd, 0x30, 0x58, 0xdd, 0xf1,
	0xe1, 0x52, 0xf2, 0x45, 0xd8, 0x23, 0x0d, 0x81, 0x8b, 0x47, 0xb0, 0x50, 0xe0, 0x1b, 0x02, 0xfc,
	0x43, 0x78, 0x33, 0xe9, 0xe6, 0x14, 0x86, 0x7a, 0x95, 0x71, 0x1d, 0x4b, 0x53, 0xd4, 0xe2, 0xc4,
	0x63, 0x75, 0x6e, 0x04, 0x87, 0x96, 0xcb, 0xa9, 0x63, 0x50, 0x17, 0xd7, 0x74, 0x2c, 0xdb, 0x9e,
	0x36, 0xdc, 0xd7, 0xc0, 0x4b, 0xf7, 0x08, 0xa7, 0xd5, 0xe6, 0x46, 0xd4, 0x4a, 0x0e, 0x58, 0x4b,
	0xaf, 0x34, 0x7d, 0x2d, 0xcf, 0x5a, 0xa8, 0xb5, 0x7c, 0x22, 0xd6, 0x72, 0x17, 0xae, 0x27, 0xac,
	0xa5, 0x21, 0x0c, 0xf5, 0x58, 0x87, 0xdb, 0x62, 0x2e, 0xe1, 0xd8, 0x67, 0xbc, 0xdd, 0x7b, 0x1a,
	0x63, 0x43, 0x36, 0x6a, 0x4d, 0x97, 0xb4, 0xe1, 0x8f, 0x1a, 0x18, 0x89, 0xca, 0x07, 0xce, 0x0d,
	0x3c, 0x58, 0x85, 0x26, 0xfd, 0x84, 0x8b, 0x49, 0x33, 0x56, 0x7a, 0xa7, 0x84, 0x50, 0x4b, 0x56,
	0x12, 0xfb, 0xdc, 0x21, 0x01, 0xb9, 0xaa, 0x2b, 0xb1, 0x5d, 0x1f, 0x6a, 0x60, 0x24, 0xd8, 0x47,
	0x69, 0xa8, 0x91, 0x26, 0x1d, 0x35, 0x26, 0x55, 0xa8, 0x57, 0x04, 0x6a, 0x11, 0xa2, 0x41, 0x9b,
	0xb2, 0x0f, 0x6a, 0x70, 0xad, 0x8d, 0xf5, 0xb4, 0xee, 0x10, 0xa5, 0xc7, 0x28, 0x6c, 0xf2, 0x25,
	0x69, 0xdf, 0x73, 0xa7, 0x51, 0x2a, 0x0c, 0xfe, 0x30, 0x98, 0x5e, 0x12, 0xd0, 0xf3, 0x70, 0x36,
	0x7d, 0x8b, 0xaa, 0x9e, 0xfd, 0x77, 0x0d, 0xbc, 0xdc, 0xbd, 0x7b, 0x64, 0x54, 0x0b, 0xe9, 0xdb,
	0xac, 0x2b, 0xb4, 0x28, 0xb3, 0x5e, 0xc5, 0x77, 0x5d, 0xa0, 0xae, 0xc1, 0x1b, 0xe9, 0x9b, 0x52,
	0x45, 0xb9, 0xef, 0x96, 0x0c, 0x3f, 0x6d, 0xda, 0xc1, 0x55, 0x33, 0x16, 0x9b, 0x50, 0xf4, 0x13,
	0xf3, 0x29, 0x54, 0xd9, 0x7a, 0x89, 0xb8, 0x36, 0x63, 0x75, 0x28, 0x7a, 0xd5, 0x46, 0xa8, 0x51,
	0x40, 0xf9, 0xb5, 0x06, 0x4e, 0xcb, 0x8a, 0x63, 0xc6, 0xce, 0x2a, 0x21, 0x30, 0xf9, 0x43, 0x45,
	0x29, 0x42, 0xbe, 0xd9, 0x74, 0xa1, 0x82, 0xbb, 0x28, 0xe0, 0xa6, 0x60, 0x3e, 0xa9, 0x74, 0x99,
	0xb1, 0xa3, 0x57, 0x09, 0x81, 0x7b, 0xaa, 0x54, 0xe5, 0xf5, 0xf5, 0xc1, 0xae, 0xcf, 0x71, 0x4a,
	0xa9, 0xc6, 0x94, 0x21, 0xd7, 0x52, 0x76, 0x03, 0xc5, 0xb7, 0x22, 0xf8, 0xae, 0xc2, 0xe5, 0x0c,
	0x3d, 0x2e, 0x09, 0x2c, 0x7b, 0xae, 0xeb, 0x5f, 0xc3, 0x9a, 0x5d, 0xf3, 0x36, 0x38, 0x35, 0xc8,
	0x7b, 0xdb, 0xd8, 0xb1, 0xc8, 0xa0, 0xee, 0xb1, 0x5b, 0x98, 0x5e, 0xb3, 0xbd, 0x7a, 0x05, 0xfe,
	0x8e, 0x00, 0xbf, 0x02, 0x2f, 0x27, 0x80, 0x53, 0x4f, 0x77, 0x03, 0x3b, 0xdd, 0x90, 0x86, 0xdd,
	0xdc, 0xe5, 0x5b, 0x8f, 0x0e, 0x72, 0xda, 0xfe, 0x41, 0x4e, 0xfb, 0xe7, 0x20, 0xa7, 0x3d, 0x38,
	0xcc, 0x0d, 0xed, 0x1f, 0xe6, 0x86, 0xfe, 0x3c, 0xcc, 0x0d, 0x7d, 0x5a, 0xb2, 0xa8, 0xbf, 0x5d,
	0xaf, 0x14, 0x0c, 0x66, 0xa3, 0x8a, 0x53, 0x59, 0x34, 0xb6, 0x31, 0x75, 0xe2, 0x93, 0xec, 0x76,
	0xff, 0xde, 0x80, 0x1a, 0xa5, 0xca, 0x49, 0xf1, 0x31, 0x7d, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x20, 0x09, 0xa6, 0xbe, 0xd3, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error)
	// Parameters queries the parameters of the module.
	QueryParamsByTimestamp(ctx context.Context, in *types.QueryParamsByTimestampRequest, opts ...grpc.CallOption) (*types.QueryParamsByTimestampResponse, error)
	// Queries a bucket with specify name.
	HeadBucket(ctx context.Context, in *types.QueryHeadBucketRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketResponse, error)
	// Queries a bucket by id
	HeadBucketById(ctx context.Context, in *types.QueryHeadBucketByIdRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketResponse, error)
	// Queries a bucket with EIP712 standard metadata info
	HeadBucketNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryBucketNFTResponse, error)
	// Queries a object with specify name.
	HeadObject(ctx context.Context, in *types.QueryHeadObjectRequest, opts ...grpc.CallOption) (*types.QueryHeadObjectResponse, error)
	// Queries an object by id
	HeadObjectById(ctx context.Context, in *types.QueryHeadObjectByIdRequest, opts ...grpc.CallOption) (*types.QueryHeadObjectResponse, error)
	// Queries a object with EIP712 standard metadata info
	HeadObjectNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryObjectNFTResponse, error)
	// Queries a list of bucket items.
	ListBuckets(ctx context.Context, in *types.QueryListBucketsRequest, opts ...grpc.CallOption) (*types.QueryListBucketsResponse, error)
	// Queries a list of object items under the bucket.
	ListObjects(ctx context.Context, in *types.QueryListObjectsRequest, opts ...grpc.CallOption) (*types.QueryListObjectsResponse, error)
	// Queries a list of object items under the bucket.
	ListObjectsByBucketId(ctx context.Context, in *types.QueryListObjectsByBucketIdRequest, opts ...grpc.CallOption) (*types.QueryListObjectsResponse, error)
	// Queries a group with EIP712 standard metadata info
	HeadGroupNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryGroupNFTResponse, error)
	// Queries a policy which grants permission to account
	QueryPolicyForAccount(ctx context.Context, in *types.QueryPolicyForAccountRequest, opts ...grpc.CallOption) (*types.QueryPolicyForAccountResponse, error)
	// Queries a list of VerifyPermission items.
	VerifyPermission(ctx context.Context, in *types.QueryVerifyPermissionRequest, opts ...grpc.CallOption) (*types.QueryVerifyPermissionResponse, error)
	// Queries a group with specify owner and name .
	HeadGroup(ctx context.Context, in *types.QueryHeadGroupRequest, opts ...grpc.CallOption) (*types.QueryHeadGroupResponse, error)
	// Queries a list of ListGroup items.
	ListGroup(ctx context.Context, in *types.QueryListGroupRequest, opts ...grpc.CallOption) (*types.QueryListGroupResponse, error)
	// Queries a list of HeadGroupMember items.
	HeadGroupMember(ctx context.Context, in *types.QueryHeadGroupMemberRequest, opts ...grpc.CallOption) (*QueryHeadGroupMemberResponseV2, error)
	// Queries a policy that grants permission to a group
	QueryPolicyForGroup(ctx context.Context, in *types.QueryPolicyForGroupRequest, opts ...grpc.CallOption) (*types.QueryPolicyForGroupResponse, error)
	// Queries a policy by policy id
	QueryPolicyById(ctx context.Context, in *types.QueryPolicyByIdRequest, opts ...grpc.CallOption) (*types.QueryPolicyByIdResponse, error)
	// Queries lock fee for storing an object
	QueryLockFee(ctx context.Context, in *types.QueryLockFeeRequest, opts ...grpc.CallOption) (*types.QueryLockFeeResponse, error)
	// Queries a bucket extra info (with gvg bindings and price time) with specify name.
	HeadBucketExtra(ctx context.Context, in *types.QueryHeadBucketExtraRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketExtraResponse, error)
	// Queries whether read and storage prices changed for the bucket.
	QueryIsPriceChanged(ctx context.Context, in *types.QueryIsPriceChangedRequest, opts ...grpc.CallOption) (*types.QueryIsPriceChangedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *types.QueryParamsRequest, opts ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	out := new(types.QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryParamsByTimestamp(ctx context.Context, in *types.QueryParamsByTimestampRequest, opts ...grpc.CallOption) (*types.QueryParamsByTimestampResponse, error) {
	out := new(types.QueryParamsByTimestampResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryParamsByTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadBucket(ctx context.Context, in *types.QueryHeadBucketRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketResponse, error) {
	out := new(types.QueryHeadBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadBucketById(ctx context.Context, in *types.QueryHeadBucketByIdRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketResponse, error) {
	out := new(types.QueryHeadBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadBucketById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadBucketNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryBucketNFTResponse, error) {
	out := new(types.QueryBucketNFTResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadBucketNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadObject(ctx context.Context, in *types.QueryHeadObjectRequest, opts ...grpc.CallOption) (*types.QueryHeadObjectResponse, error) {
	out := new(types.QueryHeadObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadObjectById(ctx context.Context, in *types.QueryHeadObjectByIdRequest, opts ...grpc.CallOption) (*types.QueryHeadObjectResponse, error) {
	out := new(types.QueryHeadObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadObjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadObjectNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryObjectNFTResponse, error) {
	out := new(types.QueryObjectNFTResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadObjectNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListBuckets(ctx context.Context, in *types.QueryListBucketsRequest, opts ...grpc.CallOption) (*types.QueryListBucketsResponse, error) {
	out := new(types.QueryListBucketsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/ListBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListObjects(ctx context.Context, in *types.QueryListObjectsRequest, opts ...grpc.CallOption) (*types.QueryListObjectsResponse, error) {
	out := new(types.QueryListObjectsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListObjectsByBucketId(ctx context.Context, in *types.QueryListObjectsByBucketIdRequest, opts ...grpc.CallOption) (*types.QueryListObjectsResponse, error) {
	out := new(types.QueryListObjectsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/ListObjectsByBucketId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadGroupNFT(ctx context.Context, in *types.QueryNFTRequest, opts ...grpc.CallOption) (*types.QueryGroupNFTResponse, error) {
	out := new(types.QueryGroupNFTResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadGroupNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPolicyForAccount(ctx context.Context, in *types.QueryPolicyForAccountRequest, opts ...grpc.CallOption) (*types.QueryPolicyForAccountResponse, error) {
	out := new(types.QueryPolicyForAccountResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryPolicyForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyPermission(ctx context.Context, in *types.QueryVerifyPermissionRequest, opts ...grpc.CallOption) (*types.QueryVerifyPermissionResponse, error) {
	out := new(types.QueryVerifyPermissionResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/VerifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadGroup(ctx context.Context, in *types.QueryHeadGroupRequest, opts ...grpc.CallOption) (*types.QueryHeadGroupResponse, error) {
	out := new(types.QueryHeadGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGroup(ctx context.Context, in *types.QueryListGroupRequest, opts ...grpc.CallOption) (*types.QueryListGroupResponse, error) {
	out := new(types.QueryListGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadGroupMember(ctx context.Context, in *types.QueryHeadGroupMemberRequest, opts ...grpc.CallOption) (*QueryHeadGroupMemberResponseV2, error) {
	out := new(QueryHeadGroupMemberResponseV2)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPolicyForGroup(ctx context.Context, in *types.QueryPolicyForGroupRequest, opts ...grpc.CallOption) (*types.QueryPolicyForGroupResponse, error) {
	out := new(types.QueryPolicyForGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryPolicyForGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPolicyById(ctx context.Context, in *types.QueryPolicyByIdRequest, opts ...grpc.CallOption) (*types.QueryPolicyByIdResponse, error) {
	out := new(types.QueryPolicyByIdResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryPolicyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockFee(ctx context.Context, in *types.QueryLockFeeRequest, opts ...grpc.CallOption) (*types.QueryLockFeeResponse, error) {
	out := new(types.QueryLockFeeResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryLockFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HeadBucketExtra(ctx context.Context, in *types.QueryHeadBucketExtraRequest, opts ...grpc.CallOption) (*types.QueryHeadBucketExtraResponse, error) {
	out := new(types.QueryHeadBucketExtraResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/HeadBucketExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIsPriceChanged(ctx context.Context, in *types.QueryIsPriceChangedRequest, opts ...grpc.CallOption) (*types.QueryIsPriceChangedResponse, error) {
	out := new(types.QueryIsPriceChangedResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Query/QueryIsPriceChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *types.QueryParamsRequest) (*types.QueryParamsResponse, error)
	// Parameters queries the parameters of the module.
	QueryParamsByTimestamp(context.Context, *types.QueryParamsByTimestampRequest) (*types.QueryParamsByTimestampResponse, error)
	// Queries a bucket with specify name.
	HeadBucket(context.Context, *types.QueryHeadBucketRequest) (*types.QueryHeadBucketResponse, error)
	// Queries a bucket by id
	HeadBucketById(context.Context, *types.QueryHeadBucketByIdRequest) (*types.QueryHeadBucketResponse, error)
	// Queries a bucket with EIP712 standard metadata info
	HeadBucketNFT(context.Context, *types.QueryNFTRequest) (*types.QueryBucketNFTResponse, error)
	// Queries a object with specify name.
	HeadObject(context.Context, *types.QueryHeadObjectRequest) (*types.QueryHeadObjectResponse, error)
	// Queries an object by id
	HeadObjectById(context.Context, *types.QueryHeadObjectByIdRequest) (*types.QueryHeadObjectResponse, error)
	// Queries a object with EIP712 standard metadata info
	HeadObjectNFT(context.Context, *types.QueryNFTRequest) (*types.QueryObjectNFTResponse, error)
	// Queries a list of bucket items.
	ListBuckets(context.Context, *types.QueryListBucketsRequest) (*types.QueryListBucketsResponse, error)
	// Queries a list of object items under the bucket.
	ListObjects(context.Context, *types.QueryListObjectsRequest) (*types.QueryListObjectsResponse, error)
	// Queries a list of object items under the bucket.
	ListObjectsByBucketId(context.Context, *types.QueryListObjectsByBucketIdRequest) (*types.QueryListObjectsResponse, error)
	// Queries a group with EIP712 standard metadata info
	HeadGroupNFT(context.Context, *types.QueryNFTRequest) (*types.QueryGroupNFTResponse, error)
	// Queries a policy which grants permission to account
	QueryPolicyForAccount(context.Context, *types.QueryPolicyForAccountRequest) (*types.QueryPolicyForAccountResponse, error)
	// Queries a list of VerifyPermission items.
	VerifyPermission(context.Context, *types.QueryVerifyPermissionRequest) (*types.QueryVerifyPermissionResponse, error)
	// Queries a group with specify owner and name .
	HeadGroup(context.Context, *types.QueryHeadGroupRequest) (*types.QueryHeadGroupResponse, error)
	// Queries a list of ListGroup items.
	ListGroup(context.Context, *types.QueryListGroupRequest) (*types.QueryListGroupResponse, error)
	// Queries a list of HeadGroupMember items.
	HeadGroupMember(context.Context, *types.QueryHeadGroupMemberRequest) (*QueryHeadGroupMemberResponseV2, error)
	// Queries a policy that grants permission to a group
	QueryPolicyForGroup(context.Context, *types.QueryPolicyForGroupRequest) (*types.QueryPolicyForGroupResponse, error)
	// Queries a policy by policy id
	QueryPolicyById(context.Context, *types.QueryPolicyByIdRequest) (*types.QueryPolicyByIdResponse, error)
	// Queries lock fee for storing an object
	QueryLockFee(context.Context, *types.QueryLockFeeRequest) (*types.QueryLockFeeResponse, error)
	// Queries a bucket extra info (with gvg bindings and price time) with specify name.
	HeadBucketExtra(context.Context, *types.QueryHeadBucketExtraRequest) (*types.QueryHeadBucketExtraResponse, error)
	// Queries whether read and storage prices changed for the bucket.
	QueryIsPriceChanged(context.Context, *types.QueryIsPriceChangedRequest) (*types.QueryIsPriceChangedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryParamsByTimestamp(ctx context.Context, req *types.QueryParamsByTimestampRequest) (*types.QueryParamsByTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParamsByTimestamp not implemented")
}
func (*UnimplementedQueryServer) HeadBucket(ctx context.Context, req *types.QueryHeadBucketRequest) (*types.QueryHeadBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBucket not implemented")
}
func (*UnimplementedQueryServer) HeadBucketById(ctx context.Context, req *types.QueryHeadBucketByIdRequest) (*types.QueryHeadBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBucketById not implemented")
}
func (*UnimplementedQueryServer) HeadBucketNFT(ctx context.Context, req *types.QueryNFTRequest) (*types.QueryBucketNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBucketNFT not implemented")
}
func (*UnimplementedQueryServer) HeadObject(ctx context.Context, req *types.QueryHeadObjectRequest) (*types.QueryHeadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObject not implemented")
}
func (*UnimplementedQueryServer) HeadObjectById(ctx context.Context, req *types.QueryHeadObjectByIdRequest) (*types.QueryHeadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObjectById not implemented")
}
func (*UnimplementedQueryServer) HeadObjectNFT(ctx context.Context, req *types.QueryNFTRequest) (*types.QueryObjectNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObjectNFT not implemented")
}
func (*UnimplementedQueryServer) ListBuckets(ctx context.Context, req *types.QueryListBucketsRequest) (*types.QueryListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (*UnimplementedQueryServer) ListObjects(ctx context.Context, req *types.QueryListObjectsRequest) (*types.QueryListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (*UnimplementedQueryServer) ListObjectsByBucketId(ctx context.Context, req *types.QueryListObjectsByBucketIdRequest) (*types.QueryListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectsByBucketId not implemented")
}
func (*UnimplementedQueryServer) HeadGroupNFT(ctx context.Context, req *types.QueryNFTRequest) (*types.QueryGroupNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadGroupNFT not implemented")
}
func (*UnimplementedQueryServer) QueryPolicyForAccount(ctx context.Context, req *types.QueryPolicyForAccountRequest) (*types.QueryPolicyForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPolicyForAccount not implemented")
}
func (*UnimplementedQueryServer) VerifyPermission(ctx context.Context, req *types.QueryVerifyPermissionRequest) (*types.QueryVerifyPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPermission not implemented")
}
func (*UnimplementedQueryServer) HeadGroup(ctx context.Context, req *types.QueryHeadGroupRequest) (*types.QueryHeadGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadGroup not implemented")
}
func (*UnimplementedQueryServer) ListGroup(ctx context.Context, req *types.QueryListGroupRequest) (*types.QueryListGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (*UnimplementedQueryServer) HeadGroupMember(ctx context.Context, req *types.QueryHeadGroupMemberRequest) (*QueryHeadGroupMemberResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadGroupMember not implemented")
}
func (*UnimplementedQueryServer) QueryPolicyForGroup(ctx context.Context, req *types.QueryPolicyForGroupRequest) (*types.QueryPolicyForGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPolicyForGroup not implemented")
}
func (*UnimplementedQueryServer) QueryPolicyById(ctx context.Context, req *types.QueryPolicyByIdRequest) (*types.QueryPolicyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPolicyById not implemented")
}
func (*UnimplementedQueryServer) QueryLockFee(ctx context.Context, req *types.QueryLockFeeRequest) (*types.QueryLockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockFee not implemented")
}
func (*UnimplementedQueryServer) HeadBucketExtra(ctx context.Context, req *types.QueryHeadBucketExtraRequest) (*types.QueryHeadBucketExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadBucketExtra not implemented")
}
func (*UnimplementedQueryServer) QueryIsPriceChanged(ctx context.Context, req *types.QueryIsPriceChangedRequest) (*types.QueryIsPriceChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIsPriceChanged not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*types.QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryParamsByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryParamsByTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParamsByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryParamsByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParamsByTimestamp(ctx, req.(*types.QueryParamsByTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadBucket(ctx, req.(*types.QueryHeadBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadBucketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadBucketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadBucketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadBucketById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadBucketById(ctx, req.(*types.QueryHeadBucketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadBucketNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadBucketNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadBucketNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadBucketNFT(ctx, req.(*types.QueryNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadObject(ctx, req.(*types.QueryHeadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadObjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadObjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadObjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadObjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadObjectById(ctx, req.(*types.QueryHeadObjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadObjectNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadObjectNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadObjectNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadObjectNFT(ctx, req.(*types.QueryNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/ListBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListBuckets(ctx, req.(*types.QueryListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListObjects(ctx, req.(*types.QueryListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListObjectsByBucketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryListObjectsByBucketIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListObjectsByBucketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/ListObjectsByBucketId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListObjectsByBucketId(ctx, req.(*types.QueryListObjectsByBucketIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadGroupNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadGroupNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadGroupNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadGroupNFT(ctx, req.(*types.QueryNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPolicyForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryPolicyForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPolicyForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryPolicyForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPolicyForAccount(ctx, req.(*types.QueryPolicyForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryVerifyPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/VerifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyPermission(ctx, req.(*types.QueryVerifyPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadGroup(ctx, req.(*types.QueryHeadGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGroup(ctx, req.(*types.QueryListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadGroupMember(ctx, req.(*types.QueryHeadGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPolicyForGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryPolicyForGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPolicyForGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryPolicyForGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPolicyForGroup(ctx, req.(*types.QueryPolicyForGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPolicyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryPolicyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPolicyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryPolicyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPolicyById(ctx, req.(*types.QueryPolicyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryLockFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryLockFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockFee(ctx, req.(*types.QueryLockFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HeadBucketExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryHeadBucketExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HeadBucketExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/HeadBucketExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HeadBucketExtra(ctx, req.(*types.QueryHeadBucketExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIsPriceChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.QueryIsPriceChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIsPriceChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Query/QueryIsPriceChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIsPriceChanged(ctx, req.(*types.QueryIsPriceChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenfield.storage.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryParamsByTimestamp",
			Handler:    _Query_QueryParamsByTimestamp_Handler,
		},
		{
			MethodName: "HeadBucket",
			Handler:    _Query_HeadBucket_Handler,
		},
		{
			MethodName: "HeadBucketById",
			Handler:    _Query_HeadBucketById_Handler,
		},
		{
			MethodName: "HeadBucketNFT",
			Handler:    _Query_HeadBucketNFT_Handler,
		},
		{
			MethodName: "HeadObject",
			Handler:    _Query_HeadObject_Handler,
		},
		{
			MethodName: "HeadObjectById",
			Handler:    _Query_HeadObjectById_Handler,
		},
		{
			MethodName: "HeadObjectNFT",
			Handler:    _Query_HeadObjectNFT_Handler,
		},
		{
			MethodName: "ListBuckets",
			Handler:    _Query_ListBuckets_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _Query_ListObjects_Handler,
		},
		{
			MethodName: "ListObjectsByBucketId",
			Handler:    _Query_ListObjectsByBucketId_Handler,
		},
		{
			MethodName: "HeadGroupNFT",
			Handler:    _Query_HeadGroupNFT_Handler,
		},
		{
			MethodName: "QueryPolicyForAccount",
			Handler:    _Query_QueryPolicyForAccount_Handler,
		},
		{
			MethodName: "VerifyPermission",
			Handler:    _Query_VerifyPermission_Handler,
		},
		{
			MethodName: "HeadGroup",
			Handler:    _Query_HeadGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _Query_ListGroup_Handler,
		},
		{
			MethodName: "HeadGroupMember",
			Handler:    _Query_HeadGroupMember_Handler,
		},
		{
			MethodName: "QueryPolicyForGroup",
			Handler:    _Query_QueryPolicyForGroup_Handler,
		},
		{
			MethodName: "QueryPolicyById",
			Handler:    _Query_QueryPolicyById_Handler,
		},
		{
			MethodName: "QueryLockFee",
			Handler:    _Query_QueryLockFee_Handler,
		},
		{
			MethodName: "HeadBucketExtra",
			Handler:    _Query_HeadBucketExtra_Handler,
		},
		{
			MethodName: "QueryIsPriceChanged",
			Handler:    _Query_QueryIsPriceChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/storage/v2/query.proto",
}

func (m *QueryHeadGroupMemberResponseV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHeadGroupMemberResponseV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHeadGroupMemberResponseV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.GroupId.Size()
		i -= size
		if _, err := m.GroupId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHeadGroupMemberResponseV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.GroupId.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHeadGroupMemberResponseV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHeadGroupMemberResponseV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHeadGroupMemberResponseV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
