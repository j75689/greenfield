// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/storage/v2/tx.proto

package v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/bnb-chain/greenfield/types/common"
	_ "github.com/bnb-chain/greenfield/x/permission/types"
	types "github.com/bnb-chain/greenfield/x/storage/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateGroup struct {
	// owner defines the account address of group owner who create the group
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// group_name defines the name of the group. it's not globally unique.
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// member_request defines a list of member which to be add or remove
	Members []string `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	// extra defines extra info for the group
	Extra string `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	// members_with_expiration defines a list of member with expiration time
	MembersWithExpiration []*MsgGroupMember `protobuf:"bytes,5,rep,name=members_with_expiration,json=membersWithExpiration,proto3" json:"members_with_expiration,omitempty"`
}

func (m *MsgCreateGroup) Reset()         { *m = MsgCreateGroup{} }
func (m *MsgCreateGroup) String() string { return proto.CompactTextString(m) }
func (*MsgCreateGroup) ProtoMessage()    {}
func (*MsgCreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b2a5f03fff3226, []int{0}
}
func (m *MsgCreateGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateGroup.Merge(m, src)
}
func (m *MsgCreateGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateGroup proto.InternalMessageInfo

func (m *MsgCreateGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgCreateGroup) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *MsgCreateGroup) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *MsgCreateGroup) GetMembersWithExpiration() []*MsgGroupMember {
	if m != nil {
		return m.MembersWithExpiration
	}
	return nil
}

type MsgUpdateGroupMember struct {
	// operator defines the account address of the operator who has the UpdateGroupMember permission of the group.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// group_owner defines the account address of the group owner
	GroupOwner string `protobuf:"bytes,2,opt,name=group_owner,json=groupOwner,proto3" json:"group_owner,omitempty"`
	// group_name defines the name of the group which to be updated
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// members_to_add defines a list of members account address which will be add to the group
	MembersToAdd []string `protobuf:"bytes,4,rep,name=members_to_add,json=membersToAdd,proto3" json:"members_to_add,omitempty"`
	// members_to_delete defines a list of members account address which will be remove from the group
	MembersToDelete []string `protobuf:"bytes,5,rep,name=members_to_delete,json=membersToDelete,proto3" json:"members_to_delete,omitempty"`
	// members_with_expiration defines a list of member with expiration time
	MembersWithExpiration []*MsgGroupMember `protobuf:"bytes,6,rep,name=members_with_expiration,json=membersWithExpiration,proto3" json:"members_with_expiration,omitempty"`
}

func (m *MsgUpdateGroupMember) Reset()         { *m = MsgUpdateGroupMember{} }
func (m *MsgUpdateGroupMember) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGroupMember) ProtoMessage()    {}
func (*MsgUpdateGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b2a5f03fff3226, []int{1}
}
func (m *MsgUpdateGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGroupMember.Merge(m, src)
}
func (m *MsgUpdateGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGroupMember proto.InternalMessageInfo

func (m *MsgUpdateGroupMember) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetGroupOwner() string {
	if m != nil {
		return m.GroupOwner
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *MsgUpdateGroupMember) GetMembersToAdd() []string {
	if m != nil {
		return m.MembersToAdd
	}
	return nil
}

func (m *MsgUpdateGroupMember) GetMembersToDelete() []string {
	if m != nil {
		return m.MembersToDelete
	}
	return nil
}

func (m *MsgUpdateGroupMember) GetMembersWithExpiration() []*MsgGroupMember {
	if m != nil {
		return m.MembersWithExpiration
	}
	return nil
}

type MsgGroupMember struct {
	// member defines the account address of the group member
	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	// expiration_time defines the expiration time of the group member
	ExpirationTime time.Time `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
}

func (m *MsgGroupMember) Reset()         { *m = MsgGroupMember{} }
func (m *MsgGroupMember) String() string { return proto.CompactTextString(m) }
func (*MsgGroupMember) ProtoMessage()    {}
func (*MsgGroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4b2a5f03fff3226, []int{2}
}
func (m *MsgGroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGroupMember.Merge(m, src)
}
func (m *MsgGroupMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgGroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGroupMember proto.InternalMessageInfo

func (m *MsgGroupMember) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *MsgGroupMember) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*MsgCreateGroup)(nil), "greenfield.storage.v2.MsgCreateGroup")
	proto.RegisterType((*MsgUpdateGroupMember)(nil), "greenfield.storage.v2.MsgUpdateGroupMember")
	proto.RegisterType((*MsgGroupMember)(nil), "greenfield.storage.v2.MsgGroupMember")
}

func init() { proto.RegisterFile("greenfield/storage/v2/tx.proto", fileDescriptor_d4b2a5f03fff3226) }

var fileDescriptor_d4b2a5f03fff3226 = []byte{
	// 1043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xb3, 0xdd, 0x36, 0x34, 0x93, 0x34, 0x25, 0x66, 0xa3, 0x2e, 0x46, 0x6c, 0x96, 0x05,
	0xd4, 0x90, 0xb4, 0x76, 0x6a, 0x7a, 0x81, 0x03, 0x52, 0x93, 0x54, 0x08, 0xa9, 0x4b, 0xa3, 0x6d,
	0x51, 0xa5, 0x4a, 0xd5, 0x32, 0x6b, 0x4f, 0x1c, 0xc3, 0xda, 0x63, 0xcd, 0xcc, 0x6e, 0x12, 0x71,
	0xe3, 0x13, 0x94, 0x6b, 0x3f, 0x05, 0x07, 0x3e, 0x44, 0x8f, 0x15, 0x27, 0x4e, 0x80, 0x92, 0x03,
	0x9f, 0x02, 0x09, 0xd9, 0x33, 0xb6, 0x67, 0xd7, 0x3b, 0x1e, 0x23, 0xf5, 0x94, 0x78, 0xe6, 0xf7,
	0xde, 0x7f, 0xdf, 0xff, 0xcd, 0xbc, 0xf5, 0x82, 0x8e, 0x4f, 0x10, 0x8a, 0x8e, 0x03, 0x34, 0xf6,
	0x6c, 0xca, 0x30, 0x81, 0x3e, 0xb2, 0xa7, 0x8e, 0xcd, 0xce, 0xac, 0x98, 0x60, 0x86, 0x8d, 0xcd,
	0x62, 0xdf, 0x12, 0xfb, 0xd6, 0xd4, 0x31, 0x6f, 0xb9, 0x98, 0x86, 0x98, 0xda, 0x21, 0xf5, 0xed,
	0xe9, 0xbd, 0xe4, 0x0f, 0xe7, 0xcd, 0xf7, 0xf9, 0xc6, 0x30, 0x7d, 0xb2, 0xf9, 0x83, 0xd8, 0x6a,
	0xf9, 0xd8, 0xc7, 0x7c, 0x3d, 0xf9, 0x4f, 0xac, 0x6e, 0xf9, 0x18, 0xfb, 0x63, 0x64, 0xa7, 0x4f,
	0xa3, 0xc9, 0xb1, 0xcd, 0x82, 0x10, 0x51, 0x06, 0xc3, 0x58, 0x00, 0x5d, 0xe9, 0x13, 0xba, 0x38,
	0x0c, 0x71, 0x64, 0xc3, 0x38, 0x26, 0x78, 0x0a, 0xc7, 0x79, 0x8a, 0x12, 0x71, 0x4a, 0x60, 0x1c,
	0x23, 0x22, 0x80, 0x9e, 0x04, 0xc4, 0x88, 0x84, 0x01, 0xa5, 0x01, 0x8e, 0x04, 0xbb, 0x20, 0x49,
	0x66, 0x84, 0x16, 0x88, 0x21, 0x81, 0x61, 0x56, 0xdf, 0x07, 0x0b, 0x80, 0xcc, 0x47, 0x73, 0x91,
	0xcf, 0xec, 0x3c, 0x46, 0x22, 0xb8, 0xf7, 0xea, 0x0a, 0x58, 0xef, 0x53, 0xff, 0x80, 0x20, 0xc8,
	0xd0, 0xd7, 0x04, 0x4f, 0x62, 0xc3, 0x01, 0xef, 0xb8, 0xc9, 0x23, 0x26, 0xed, 0x46, 0xb7, 0xb1,
	0xbd, 0xb2, 0xdf, 0xfe, 0xfd, 0xb7, 0xbb, 0x2d, 0x61, 0xe9, 0x03, 0xcf, 0x23, 0x88, 0xd2, 0x27,
	0x8c, 0x04, 0x91, 0x3f, 0xc8, 0x40, 0xe3, 0x43, 0x00, 0xfc, 0x24, 0x78, 0x18, 0xc1, 0x10, 0xb5,
	0xaf, 0x24, 0x61, 0x83, 0x95, 0x74, 0xe5, 0x5b, 0x18, 0xa2, 0x24, 0x65, 0x88, 0xc2, 0x11, 0x22,
	0xb4, 0xdd, 0xec, 0x36, 0xab, 0x53, 0x0a, 0xd0, 0x68, 0x81, 0x6b, 0xe8, 0x8c, 0x11, 0xd8, 0xbe,
	0x9a, 0x66, 0xe3, 0x0f, 0xc6, 0x0b, 0x70, 0x4b, 0x00, 0xc3, 0xd3, 0x80, 0x9d, 0x0c, 0xd1, 0x59,
	0x1c, 0x10, 0xc8, 0x02, 0x1c, 0xb5, 0xaf, 0x75, 0x9b, 0xdb, 0xab, 0xce, 0xa7, 0xd6, 0xc2, 0x93,
	0x63, 0xf5, 0xa9, 0x9f, 0x96, 0xd7, 0x4f, 0xa3, 0x07, 0x9b, 0x22, 0xcb, 0xb3, 0x80, 0x9d, 0x3c,
	0xcc, 0x73, 0x7c, 0xb9, 0xf6, 0xf3, 0x3f, 0xbf, 0xee, 0x64, 0x55, 0xf5, 0x5e, 0x35, 0x41, 0xab,
	0x4f, 0xfd, 0xef, 0x62, 0x2f, 0x33, 0x87, 0x47, 0x1b, 0xf7, 0xc1, 0x75, 0x1c, 0x23, 0x52, 0xcb,
	0xa3, 0x9c, 0x34, 0xbe, 0x00, 0xab, 0xdc, 0x24, 0x7c, 0x1a, 0x21, 0xc2, 0x5d, 0xaa, 0x08, 0xe4,
	0x8e, 0x3e, 0x4e, 0xd8, 0x39, 0x7f, 0x9b, 0xf3, 0xfe, 0x7e, 0x05, 0xd6, 0x33, 0x57, 0x18, 0x1e,
	0x42, 0xcf, 0x6b, 0x5f, 0xd5, 0xd8, 0xbc, 0x26, 0xf8, 0xa7, 0xf8, 0x81, 0xe7, 0x19, 0x87, 0x60,
	0x43, 0x8a, 0xf7, 0xd0, 0x18, 0x31, 0x94, 0xfa, 0x59, 0x95, 0xe2, 0x66, 0x9e, 0xe2, 0x30, 0x0d,
	0xa8, 0xea, 0xcd, 0xf2, 0x5b, 0xe8, 0xcd, 0x8d, 0xa4, 0x37, 0xb9, 0x9b, 0xbd, 0x5f, 0x1a, 0xe9,
	0xc9, 0x95, 0xdb, 0xb2, 0x07, 0x96, 0x79, 0xa8, 0xb6, 0x29, 0x82, 0x33, 0xfa, 0xe0, 0x66, 0xf1,
	0x29, 0x87, 0xc9, 0x08, 0x48, 0xdb, 0xb2, 0xea, 0x98, 0x16, 0x9f, 0x0f, 0x56, 0x36, 0x1f, 0xac,
	0xa7, 0xd9, 0x7c, 0xd8, 0xbf, 0xfe, 0xfa, 0xcf, 0xad, 0xa5, 0x97, 0x7f, 0x6d, 0x35, 0x06, 0xeb,
	0x45, 0x70, 0xb2, 0xed, 0xfc, 0xdb, 0x02, 0xcd, 0x3e, 0xf5, 0x8d, 0xef, 0xc1, 0x1a, 0xbf, 0x51,
	0xfb, 0x13, 0xf7, 0x47, 0xc4, 0x8c, 0x8f, 0x17, 0x15, 0x9e, 0x5f, 0x3b, 0x0e, 0x99, 0xbb, 0x35,
	0xa0, 0x01, 0xa2, 0x31, 0x8e, 0x28, 0x4a, 0x14, 0xb8, 0xeb, 0x1a, 0x05, 0x19, 0x52, 0x2a, 0xc8,
	0x50, 0xae, 0x30, 0x06, 0xef, 0xf2, 0x83, 0xcf, 0xd7, 0xbf, 0x89, 0x8e, 0xb1, 0x71, 0x5b, 0x91,
	0x60, 0x1e, 0x34, 0xed, 0x9a, 0xa0, 0x5c, 0x4f, 0x3f, 0x20, 0x04, 0x13, 0x4d, 0x3d, 0x32, 0xa4,
	0xac, 0x47, 0x86, 0x72, 0x05, 0x0c, 0x36, 0x0e, 0x03, 0xea, 0xe2, 0x88, 0x05, 0xd1, 0x24, 0xb3,
	0x6d, 0x5b, 0xe5, 0xc8, 0x3c, 0x69, 0xee, 0xd5, 0x25, 0xe5, 0x92, 0x78, 0xeb, 0x1e, 0x8f, 0x7e,
	0x40, 0xae, 0xee, 0x10, 0x70, 0x48, 0x73, 0x08, 0x38, 0x94, 0x2b, 0x3c, 0x07, 0xe0, 0x09, 0x82,
	0x63, 0x91, 0xff, 0x23, 0x45, 0x68, 0x81, 0x98, 0x9f, 0x69, 0x11, 0xb9, 0xfd, 0x03, 0x94, 0xac,
	0x48, 0x0a, 0xaa, 0xf6, 0xcf, 0x83, 0xca, 0xf6, 0xcf, 0x83, 0x72, 0x25, 0x07, 0x38, 0x3e, 0xd7,
	0x54, 0x52, 0x20, 0xca, 0x4a, 0x0a, 0xa4, 0x7c, 0x55, 0x34, 0x7d, 0x90, 0x21, 0xcd, 0x55, 0x99,
	0x53, 0x20, 0xc0, 0x38, 0x80, 0x91, 0x8b, 0xc6, 0x33, 0xfd, 0x56, 0x7e, 0xc4, 0x12, 0x6a, 0xde,
	0xab, 0x8d, 0x96, 0x2f, 0x8c, 0xa6, 0x2a, 0x19, 0xd2, 0x5c, 0x98, 0x39, 0x85, 0xd9, 0x0b, 0x23,
	0x64, 0x6a, 0x5c, 0x18, 0xa1, 0xb5, 0x57, 0x97, 0x2c, 0x4f, 0x1c, 0xbe, 0x5e, 0x63, 0xe2, 0x14,
	0xa0, 0x66, 0xe2, 0x14, 0xa0, 0x64, 0xe0, 0xaa, 0xfc, 0xd6, 0x53, 0xf1, 0xdd, 0x24, 0x61, 0xe6,
	0x4e, 0xe5, 0xfd, 0x4c, 0x99, 0x5c, 0xe1, 0x05, 0x58, 0xe5, 0xc7, 0x85, 0x2b, 0xf4, 0x2a, 0x8f,
	0x54, 0x75, 0x7a, 0x89, 0x91, 0x4e, 0xdd, 0x46, 0xf9, 0xcd, 0x64, 0x57, 0x5d, 0x46, 0x09, 0x56,
	0xb6, 0xa8, 0x44, 0x96, 0x5b, 0x94, 0x6e, 0x3e, 0x4c, 0x5f, 0xc9, 0x6e, 0xeb, 0xb3, 0xa4, 0xa0,
	0xa6, 0x45, 0x05, 0x28, 0x4f, 0x85, 0x47, 0x08, 0x4e, 0x85, 0x7f, 0xaa, 0xa9, 0x50, 0x20, 0xca,
	0xa9, 0x50, 0x20, 0x72, 0x73, 0xf8, 0xa9, 0xaf, 0x6e, 0x8e, 0xc4, 0x28, 0x9b, 0x23, 0x31, 0x79,
	0xfa, 0x67, 0x60, 0xe5, 0x68, 0xc2, 0x8e, 0xf0, 0x38, 0x70, 0xcf, 0x8d, 0xae, 0x22, 0x30, 0x27,
	0xcc, 0x6d, 0x1d, 0x51, 0x9e, 0x66, 0x22, 0x77, 0xf5, 0x34, 0x13, 0xe9, 0x77, 0x6b, 0x40, 0xb2,
	0x02, 0xef, 0xc8, 0x51, 0xfa, 0x2b, 0x43, 0xa9, 0x20, 0x43, 0x4a, 0x05, 0x19, 0xca, 0x15, 0x5c,
	0x70, 0xa3, 0x1f, 0xf8, 0xa4, 0x78, 0x3f, 0xfa, 0x44, 0xe9, 0xac, 0x44, 0x99, 0x77, 0xea, 0x50,
	0xb9, 0xc8, 0x4f, 0x60, 0xf3, 0x00, 0x87, 0x71, 0x52, 0xe0, 0xac, 0xd8, 0x1d, 0xe5, 0x57, 0xc7,
	0x02, 0xda, 0xbc, 0xff, 0x7f, 0xe8, 0x5c, 0x7c, 0x02, 0xde, 0xe3, 0xb3, 0x7b, 0x56, 0x7a, 0xa7,
	0x72, 0xce, 0xcf, 0x0a, 0x3b, 0xf5, 0xd9, 0x4c, 0x76, 0xff, 0xd1, 0xeb, 0x8b, 0x4e, 0xe3, 0xcd,
	0x45, 0xa7, 0xf1, 0xf7, 0x45, 0xa7, 0xf1, 0xf2, 0xb2, 0xb3, 0xf4, 0xe6, 0xb2, 0xb3, 0xf4, 0xc7,
	0x65, 0x67, 0xe9, 0xb9, 0xe3, 0x07, 0xec, 0x64, 0x32, 0xb2, 0x5c, 0x1c, 0xda, 0xa3, 0x68, 0x74,
	0xd7, 0x3d, 0x81, 0x41, 0x64, 0x4b, 0x3f, 0x0e, 0xcf, 0x66, 0x7f, 0x1e, 0xda, 0x53, 0x67, 0xb4,
	0x9c, 0xbe, 0xfb, 0x7e, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xd9, 0xdb, 0x83, 0xac,
	0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// basic operation of bucket
	CreateBucket(ctx context.Context, in *types.MsgCreateBucket, opts ...grpc.CallOption) (*types.MsgCreateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *types.MsgDeleteBucket, opts ...grpc.CallOption) (*types.MsgDeleteBucketResponse, error)
	UpdateBucketInfo(ctx context.Context, in *types.MsgUpdateBucketInfo, opts ...grpc.CallOption) (*types.MsgUpdateBucketInfoResponse, error)
	MirrorBucket(ctx context.Context, in *types.MsgMirrorBucket, opts ...grpc.CallOption) (*types.MsgMirrorBucketResponse, error)
	DiscontinueBucket(ctx context.Context, in *types.MsgDiscontinueBucket, opts ...grpc.CallOption) (*types.MsgDiscontinueBucketResponse, error)
	// basic operation of object
	CreateObject(ctx context.Context, in *types.MsgCreateObject, opts ...grpc.CallOption) (*types.MsgCreateObjectResponse, error)
	SealObject(ctx context.Context, in *types.MsgSealObject, opts ...grpc.CallOption) (*types.MsgSealObjectResponse, error)
	RejectSealObject(ctx context.Context, in *types.MsgRejectSealObject, opts ...grpc.CallOption) (*types.MsgRejectSealObjectResponse, error)
	CopyObject(ctx context.Context, in *types.MsgCopyObject, opts ...grpc.CallOption) (*types.MsgCopyObjectResponse, error)
	DeleteObject(ctx context.Context, in *types.MsgDeleteObject, opts ...grpc.CallOption) (*types.MsgDeleteObjectResponse, error)
	CancelCreateObject(ctx context.Context, in *types.MsgCancelCreateObject, opts ...grpc.CallOption) (*types.MsgCancelCreateObjectResponse, error)
	MirrorObject(ctx context.Context, in *types.MsgMirrorObject, opts ...grpc.CallOption) (*types.MsgMirrorObjectResponse, error)
	DiscontinueObject(ctx context.Context, in *types.MsgDiscontinueObject, opts ...grpc.CallOption) (*types.MsgDiscontinueObjectResponse, error)
	UpdateObjectInfo(ctx context.Context, in *types.MsgUpdateObjectInfo, opts ...grpc.CallOption) (*types.MsgUpdateObjectInfoResponse, error)
	// basic operation of group
	CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*types.MsgCreateGroupResponse, error)
	DeleteGroup(ctx context.Context, in *types.MsgDeleteGroup, opts ...grpc.CallOption) (*types.MsgDeleteGroupResponse, error)
	UpdateGroupMember(ctx context.Context, in *MsgUpdateGroupMember, opts ...grpc.CallOption) (*types.MsgUpdateGroupMemberResponse, error)
	UpdateGroupExtra(ctx context.Context, in *types.MsgUpdateGroupExtra, opts ...grpc.CallOption) (*types.MsgUpdateGroupExtraResponse, error)
	LeaveGroup(ctx context.Context, in *types.MsgLeaveGroup, opts ...grpc.CallOption) (*types.MsgLeaveGroupResponse, error)
	MirrorGroup(ctx context.Context, in *types.MsgMirrorGroup, opts ...grpc.CallOption) (*types.MsgMirrorGroupResponse, error)
	// basic operation of policy
	PutPolicy(ctx context.Context, in *types.MsgPutPolicy, opts ...grpc.CallOption) (*types.MsgPutPolicyResponse, error)
	DeletePolicy(ctx context.Context, in *types.MsgDeletePolicy, opts ...grpc.CallOption) (*types.MsgDeletePolicyResponse, error)
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *types.MsgUpdateParams, opts ...grpc.CallOption) (*types.MsgUpdateParamsResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	MigrateBucket(ctx context.Context, in *types.MsgMigrateBucket, opts ...grpc.CallOption) (*types.MsgMigrateBucketResponse, error)
	CompleteMigrateBucket(ctx context.Context, in *types.MsgCompleteMigrateBucket, opts ...grpc.CallOption) (*types.MsgCompleteMigrateBucketResponse, error)
	CancelMigrateBucket(ctx context.Context, in *types.MsgCancelMigrateBucket, opts ...grpc.CallOption) (*types.MsgCancelMigrateBucketResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateBucket(ctx context.Context, in *types.MsgCreateBucket, opts ...grpc.CallOption) (*types.MsgCreateBucketResponse, error) {
	out := new(types.MsgCreateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBucket(ctx context.Context, in *types.MsgDeleteBucket, opts ...grpc.CallOption) (*types.MsgDeleteBucketResponse, error) {
	out := new(types.MsgDeleteBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBucketInfo(ctx context.Context, in *types.MsgUpdateBucketInfo, opts ...grpc.CallOption) (*types.MsgUpdateBucketInfoResponse, error) {
	out := new(types.MsgUpdateBucketInfoResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/UpdateBucketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorBucket(ctx context.Context, in *types.MsgMirrorBucket, opts ...grpc.CallOption) (*types.MsgMirrorBucketResponse, error) {
	out := new(types.MsgMirrorBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/MirrorBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DiscontinueBucket(ctx context.Context, in *types.MsgDiscontinueBucket, opts ...grpc.CallOption) (*types.MsgDiscontinueBucketResponse, error) {
	out := new(types.MsgDiscontinueBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DiscontinueBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateObject(ctx context.Context, in *types.MsgCreateObject, opts ...grpc.CallOption) (*types.MsgCreateObjectResponse, error) {
	out := new(types.MsgCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SealObject(ctx context.Context, in *types.MsgSealObject, opts ...grpc.CallOption) (*types.MsgSealObjectResponse, error) {
	out := new(types.MsgSealObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/SealObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectSealObject(ctx context.Context, in *types.MsgRejectSealObject, opts ...grpc.CallOption) (*types.MsgRejectSealObjectResponse, error) {
	out := new(types.MsgRejectSealObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/RejectSealObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CopyObject(ctx context.Context, in *types.MsgCopyObject, opts ...grpc.CallOption) (*types.MsgCopyObjectResponse, error) {
	out := new(types.MsgCopyObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteObject(ctx context.Context, in *types.MsgDeleteObject, opts ...grpc.CallOption) (*types.MsgDeleteObjectResponse, error) {
	out := new(types.MsgDeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelCreateObject(ctx context.Context, in *types.MsgCancelCreateObject, opts ...grpc.CallOption) (*types.MsgCancelCreateObjectResponse, error) {
	out := new(types.MsgCancelCreateObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CancelCreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorObject(ctx context.Context, in *types.MsgMirrorObject, opts ...grpc.CallOption) (*types.MsgMirrorObjectResponse, error) {
	out := new(types.MsgMirrorObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/MirrorObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DiscontinueObject(ctx context.Context, in *types.MsgDiscontinueObject, opts ...grpc.CallOption) (*types.MsgDiscontinueObjectResponse, error) {
	out := new(types.MsgDiscontinueObjectResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DiscontinueObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateObjectInfo(ctx context.Context, in *types.MsgUpdateObjectInfo, opts ...grpc.CallOption) (*types.MsgUpdateObjectInfoResponse, error) {
	out := new(types.MsgUpdateObjectInfoResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/UpdateObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroup(ctx context.Context, in *MsgCreateGroup, opts ...grpc.CallOption) (*types.MsgCreateGroupResponse, error) {
	out := new(types.MsgCreateGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteGroup(ctx context.Context, in *types.MsgDeleteGroup, opts ...grpc.CallOption) (*types.MsgDeleteGroupResponse, error) {
	out := new(types.MsgDeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGroupMember(ctx context.Context, in *MsgUpdateGroupMember, opts ...grpc.CallOption) (*types.MsgUpdateGroupMemberResponse, error) {
	out := new(types.MsgUpdateGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/UpdateGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGroupExtra(ctx context.Context, in *types.MsgUpdateGroupExtra, opts ...grpc.CallOption) (*types.MsgUpdateGroupExtraResponse, error) {
	out := new(types.MsgUpdateGroupExtraResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/UpdateGroupExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveGroup(ctx context.Context, in *types.MsgLeaveGroup, opts ...grpc.CallOption) (*types.MsgLeaveGroupResponse, error) {
	out := new(types.MsgLeaveGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MirrorGroup(ctx context.Context, in *types.MsgMirrorGroup, opts ...grpc.CallOption) (*types.MsgMirrorGroupResponse, error) {
	out := new(types.MsgMirrorGroupResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/MirrorGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PutPolicy(ctx context.Context, in *types.MsgPutPolicy, opts ...grpc.CallOption) (*types.MsgPutPolicyResponse, error) {
	out := new(types.MsgPutPolicyResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/PutPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeletePolicy(ctx context.Context, in *types.MsgDeletePolicy, opts ...grpc.CallOption) (*types.MsgDeletePolicyResponse, error) {
	out := new(types.MsgDeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *types.MsgUpdateParams, opts ...grpc.CallOption) (*types.MsgUpdateParamsResponse, error) {
	out := new(types.MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateBucket(ctx context.Context, in *types.MsgMigrateBucket, opts ...grpc.CallOption) (*types.MsgMigrateBucketResponse, error) {
	out := new(types.MsgMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/MigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteMigrateBucket(ctx context.Context, in *types.MsgCompleteMigrateBucket, opts ...grpc.CallOption) (*types.MsgCompleteMigrateBucketResponse, error) {
	out := new(types.MsgCompleteMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CompleteMigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelMigrateBucket(ctx context.Context, in *types.MsgCancelMigrateBucket, opts ...grpc.CallOption) (*types.MsgCancelMigrateBucketResponse, error) {
	out := new(types.MsgCancelMigrateBucketResponse)
	err := c.cc.Invoke(ctx, "/greenfield.storage.v2.Msg/CancelMigrateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// basic operation of bucket
	CreateBucket(context.Context, *types.MsgCreateBucket) (*types.MsgCreateBucketResponse, error)
	DeleteBucket(context.Context, *types.MsgDeleteBucket) (*types.MsgDeleteBucketResponse, error)
	UpdateBucketInfo(context.Context, *types.MsgUpdateBucketInfo) (*types.MsgUpdateBucketInfoResponse, error)
	MirrorBucket(context.Context, *types.MsgMirrorBucket) (*types.MsgMirrorBucketResponse, error)
	DiscontinueBucket(context.Context, *types.MsgDiscontinueBucket) (*types.MsgDiscontinueBucketResponse, error)
	// basic operation of object
	CreateObject(context.Context, *types.MsgCreateObject) (*types.MsgCreateObjectResponse, error)
	SealObject(context.Context, *types.MsgSealObject) (*types.MsgSealObjectResponse, error)
	RejectSealObject(context.Context, *types.MsgRejectSealObject) (*types.MsgRejectSealObjectResponse, error)
	CopyObject(context.Context, *types.MsgCopyObject) (*types.MsgCopyObjectResponse, error)
	DeleteObject(context.Context, *types.MsgDeleteObject) (*types.MsgDeleteObjectResponse, error)
	CancelCreateObject(context.Context, *types.MsgCancelCreateObject) (*types.MsgCancelCreateObjectResponse, error)
	MirrorObject(context.Context, *types.MsgMirrorObject) (*types.MsgMirrorObjectResponse, error)
	DiscontinueObject(context.Context, *types.MsgDiscontinueObject) (*types.MsgDiscontinueObjectResponse, error)
	UpdateObjectInfo(context.Context, *types.MsgUpdateObjectInfo) (*types.MsgUpdateObjectInfoResponse, error)
	// basic operation of group
	CreateGroup(context.Context, *MsgCreateGroup) (*types.MsgCreateGroupResponse, error)
	DeleteGroup(context.Context, *types.MsgDeleteGroup) (*types.MsgDeleteGroupResponse, error)
	UpdateGroupMember(context.Context, *MsgUpdateGroupMember) (*types.MsgUpdateGroupMemberResponse, error)
	UpdateGroupExtra(context.Context, *types.MsgUpdateGroupExtra) (*types.MsgUpdateGroupExtraResponse, error)
	LeaveGroup(context.Context, *types.MsgLeaveGroup) (*types.MsgLeaveGroupResponse, error)
	MirrorGroup(context.Context, *types.MsgMirrorGroup) (*types.MsgMirrorGroupResponse, error)
	// basic operation of policy
	PutPolicy(context.Context, *types.MsgPutPolicy) (*types.MsgPutPolicyResponse, error)
	DeletePolicy(context.Context, *types.MsgDeletePolicy) (*types.MsgDeletePolicyResponse, error)
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc
	MigrateBucket(context.Context, *types.MsgMigrateBucket) (*types.MsgMigrateBucketResponse, error)
	CompleteMigrateBucket(context.Context, *types.MsgCompleteMigrateBucket) (*types.MsgCompleteMigrateBucketResponse, error)
	CancelMigrateBucket(context.Context, *types.MsgCancelMigrateBucket) (*types.MsgCancelMigrateBucketResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateBucket(ctx context.Context, req *types.MsgCreateBucket) (*types.MsgCreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedMsgServer) DeleteBucket(ctx context.Context, req *types.MsgDeleteBucket) (*types.MsgDeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (*UnimplementedMsgServer) UpdateBucketInfo(ctx context.Context, req *types.MsgUpdateBucketInfo) (*types.MsgUpdateBucketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketInfo not implemented")
}
func (*UnimplementedMsgServer) MirrorBucket(ctx context.Context, req *types.MsgMirrorBucket) (*types.MsgMirrorBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorBucket not implemented")
}
func (*UnimplementedMsgServer) DiscontinueBucket(ctx context.Context, req *types.MsgDiscontinueBucket) (*types.MsgDiscontinueBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscontinueBucket not implemented")
}
func (*UnimplementedMsgServer) CreateObject(ctx context.Context, req *types.MsgCreateObject) (*types.MsgCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (*UnimplementedMsgServer) SealObject(ctx context.Context, req *types.MsgSealObject) (*types.MsgSealObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealObject not implemented")
}
func (*UnimplementedMsgServer) RejectSealObject(ctx context.Context, req *types.MsgRejectSealObject) (*types.MsgRejectSealObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSealObject not implemented")
}
func (*UnimplementedMsgServer) CopyObject(ctx context.Context, req *types.MsgCopyObject) (*types.MsgCopyObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (*UnimplementedMsgServer) DeleteObject(ctx context.Context, req *types.MsgDeleteObject) (*types.MsgDeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (*UnimplementedMsgServer) CancelCreateObject(ctx context.Context, req *types.MsgCancelCreateObject) (*types.MsgCancelCreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCreateObject not implemented")
}
func (*UnimplementedMsgServer) MirrorObject(ctx context.Context, req *types.MsgMirrorObject) (*types.MsgMirrorObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorObject not implemented")
}
func (*UnimplementedMsgServer) DiscontinueObject(ctx context.Context, req *types.MsgDiscontinueObject) (*types.MsgDiscontinueObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscontinueObject not implemented")
}
func (*UnimplementedMsgServer) UpdateObjectInfo(ctx context.Context, req *types.MsgUpdateObjectInfo) (*types.MsgUpdateObjectInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectInfo not implemented")
}
func (*UnimplementedMsgServer) CreateGroup(ctx context.Context, req *MsgCreateGroup) (*types.MsgCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedMsgServer) DeleteGroup(ctx context.Context, req *types.MsgDeleteGroup) (*types.MsgDeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedMsgServer) UpdateGroupMember(ctx context.Context, req *MsgUpdateGroupMember) (*types.MsgUpdateGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupMember not implemented")
}
func (*UnimplementedMsgServer) UpdateGroupExtra(ctx context.Context, req *types.MsgUpdateGroupExtra) (*types.MsgUpdateGroupExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupExtra not implemented")
}
func (*UnimplementedMsgServer) LeaveGroup(ctx context.Context, req *types.MsgLeaveGroup) (*types.MsgLeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (*UnimplementedMsgServer) MirrorGroup(ctx context.Context, req *types.MsgMirrorGroup) (*types.MsgMirrorGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorGroup not implemented")
}
func (*UnimplementedMsgServer) PutPolicy(ctx context.Context, req *types.MsgPutPolicy) (*types.MsgPutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPolicy not implemented")
}
func (*UnimplementedMsgServer) DeletePolicy(ctx context.Context, req *types.MsgDeletePolicy) (*types.MsgDeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *types.MsgUpdateParams) (*types.MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) MigrateBucket(ctx context.Context, req *types.MsgMigrateBucket) (*types.MsgMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateBucket not implemented")
}
func (*UnimplementedMsgServer) CompleteMigrateBucket(ctx context.Context, req *types.MsgCompleteMigrateBucket) (*types.MsgCompleteMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMigrateBucket not implemented")
}
func (*UnimplementedMsgServer) CancelMigrateBucket(ctx context.Context, req *types.MsgCancelMigrateBucket) (*types.MsgCancelMigrateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMigrateBucket not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCreateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBucket(ctx, req.(*types.MsgCreateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDeleteBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBucket(ctx, req.(*types.MsgDeleteBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgUpdateBucketInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/UpdateBucketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBucketInfo(ctx, req.(*types.MsgUpdateBucketInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMirrorBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/MirrorBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorBucket(ctx, req.(*types.MsgMirrorBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DiscontinueBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDiscontinueBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DiscontinueBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DiscontinueBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DiscontinueBucket(ctx, req.(*types.MsgDiscontinueBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateObject(ctx, req.(*types.MsgCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SealObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgSealObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SealObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/SealObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SealObject(ctx, req.(*types.MsgSealObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectSealObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgRejectSealObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectSealObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/RejectSealObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectSealObject(ctx, req.(*types.MsgRejectSealObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCopyObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CopyObject(ctx, req.(*types.MsgCopyObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDeleteObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteObject(ctx, req.(*types.MsgDeleteObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelCreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCancelCreateObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelCreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CancelCreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelCreateObject(ctx, req.(*types.MsgCancelCreateObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMirrorObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/MirrorObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorObject(ctx, req.(*types.MsgMirrorObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DiscontinueObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDiscontinueObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DiscontinueObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DiscontinueObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DiscontinueObject(ctx, req.(*types.MsgDiscontinueObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgUpdateObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/UpdateObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateObjectInfo(ctx, req.(*types.MsgUpdateObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroup(ctx, req.(*MsgCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDeleteGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteGroup(ctx, req.(*types.MsgDeleteGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGroupMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/UpdateGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGroupMember(ctx, req.(*MsgUpdateGroupMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGroupExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgUpdateGroupExtra)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGroupExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/UpdateGroupExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGroupExtra(ctx, req.(*types.MsgUpdateGroupExtra))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgLeaveGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveGroup(ctx, req.(*types.MsgLeaveGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MirrorGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMirrorGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MirrorGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/MirrorGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MirrorGroup(ctx, req.(*types.MsgMirrorGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgPutPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/PutPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PutPolicy(ctx, req.(*types.MsgPutPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgDeletePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeletePolicy(ctx, req.(*types.MsgDeletePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*types.MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/MigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateBucket(ctx, req.(*types.MsgMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteMigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCompleteMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteMigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CompleteMigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteMigrateBucket(ctx, req.(*types.MsgCompleteMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelMigrateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.MsgCancelMigrateBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelMigrateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenfield.storage.v2.Msg/CancelMigrateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelMigrateBucket(ctx, req.(*types.MsgCancelMigrateBucket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenfield.storage.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _Msg_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _Msg_DeleteBucket_Handler,
		},
		{
			MethodName: "UpdateBucketInfo",
			Handler:    _Msg_UpdateBucketInfo_Handler,
		},
		{
			MethodName: "MirrorBucket",
			Handler:    _Msg_MirrorBucket_Handler,
		},
		{
			MethodName: "DiscontinueBucket",
			Handler:    _Msg_DiscontinueBucket_Handler,
		},
		{
			MethodName: "CreateObject",
			Handler:    _Msg_CreateObject_Handler,
		},
		{
			MethodName: "SealObject",
			Handler:    _Msg_SealObject_Handler,
		},
		{
			MethodName: "RejectSealObject",
			Handler:    _Msg_RejectSealObject_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _Msg_CopyObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Msg_DeleteObject_Handler,
		},
		{
			MethodName: "CancelCreateObject",
			Handler:    _Msg_CancelCreateObject_Handler,
		},
		{
			MethodName: "MirrorObject",
			Handler:    _Msg_MirrorObject_Handler,
		},
		{
			MethodName: "DiscontinueObject",
			Handler:    _Msg_DiscontinueObject_Handler,
		},
		{
			MethodName: "UpdateObjectInfo",
			Handler:    _Msg_UpdateObjectInfo_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Msg_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Msg_DeleteGroup_Handler,
		},
		{
			MethodName: "UpdateGroupMember",
			Handler:    _Msg_UpdateGroupMember_Handler,
		},
		{
			MethodName: "UpdateGroupExtra",
			Handler:    _Msg_UpdateGroupExtra_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Msg_LeaveGroup_Handler,
		},
		{
			MethodName: "MirrorGroup",
			Handler:    _Msg_MirrorGroup_Handler,
		},
		{
			MethodName: "PutPolicy",
			Handler:    _Msg_PutPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Msg_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "MigrateBucket",
			Handler:    _Msg_MigrateBucket_Handler,
		},
		{
			MethodName: "CompleteMigrateBucket",
			Handler:    _Msg_CompleteMigrateBucket_Handler,
		},
		{
			MethodName: "CancelMigrateBucket",
			Handler:    _Msg_CancelMigrateBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/storage/v2/tx.proto",
}

func (m *MsgCreateGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MembersWithExpiration) > 0 {
		for iNdEx := len(m.MembersWithExpiration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MembersWithExpiration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MembersWithExpiration) > 0 {
		for iNdEx := len(m.MembersWithExpiration) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MembersWithExpiration[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MembersToDelete) > 0 {
		for iNdEx := len(m.MembersToDelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersToDelete[iNdEx])
			copy(dAtA[i:], m.MembersToDelete[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.MembersToDelete[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MembersToAdd) > 0 {
		for iNdEx := len(m.MembersToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersToAdd[iNdEx])
			copy(dAtA[i:], m.MembersToAdd[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.MembersToAdd[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupOwner) > 0 {
		i -= len(m.GroupOwner)
		copy(dAtA[i:], m.GroupOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MembersWithExpiration) > 0 {
		for _, e := range m.MembersWithExpiration {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MembersToAdd) > 0 {
		for _, s := range m.MembersToAdd {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MembersToDelete) > 0 {
		for _, s := range m.MembersToDelete {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MembersWithExpiration) > 0 {
		for _, e := range m.MembersWithExpiration {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersWithExpiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersWithExpiration = append(m.MembersWithExpiration, &MsgGroupMember{})
			if err := m.MembersWithExpiration[len(m.MembersWithExpiration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToAdd = append(m.MembersToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersToDelete", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersToDelete = append(m.MembersToDelete, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersWithExpiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersWithExpiration = append(m.MembersWithExpiration, &MsgGroupMember{})
			if err := m.MembersWithExpiration[len(m.MembersWithExpiration)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
